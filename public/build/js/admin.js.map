{"version":3,"sources":["admin.js"],"names":["iniciarApp","buscarPorFecha","cambiarEstadoCita","manejarTabs","gestionarServicios","gestionarUsuarios","fechaInput","document","querySelector","addEventListener","e","fechaSeleccionada","target","value","window","location","btnLimpiar","preventDefault","querySelectorAll","forEach","selector","async","citaId","this","dataset","estado","datos","FormData","append","url","respuesta","fetch","method","body","json","tipo","badge","closest","classList","remove","clases","pendiente","confirmada","completada","cancelada","add","textContent","charAt","toUpperCase","slice","Swal","fire","icon","title","text","showConfirmButton","timer","setTimeout","reload","error","console","tabs","contents","tab","t","content","tabId","contenidoActivo","btnNuevoServicio","mostrarFormularioServicio","btn","editarServicio","id","confirmarEliminarServicio","servicio","html","nombre_servicio","precio","tiempo_estimado","showCancelButton","confirmButtonText","cancelButtonText","preConfirm","form","getElementById","checkValidity","reportValidity","guardarServicio","formData","response","resultado","mensaje","confirmButtonColor","cancelButtonColor","then","result","isConfirmed","eliminarServicio","usuario","nombreCompleto","nombre","apellido","trim","fechaRegistro","fecha_creacion","Date","toLocaleDateString","fechaActualizacion","ultima_actualizacion","email","telefono","confirmado","admin","customClass","confirmButton","mostrarFormularioUsuario","eliminarUsuario","actualizarUsuario"],"mappings":"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","file":"admin.js","sourcesContent":["document.addEventListener('DOMContentLoaded', function() {\r\n    iniciarApp();\r\n});\r\n\r\nfunction iniciarApp() {\r\n    buscarPorFecha();\r\n    cambiarEstadoCita();\r\n    manejarTabs();\r\n    gestionarServicios();\r\n    gestionarUsuarios();\r\n}\r\n\r\nfunction buscarPorFecha() {\r\n    const fechaInput = document.querySelector('#fecha');\r\n    if(fechaInput) {\r\n        fechaInput.addEventListener('input', function(e) {\r\n            const fechaSeleccionada = e.target.value;\r\n            window.location = `?fecha=${fechaSeleccionada}`;\r\n        });\r\n\r\n        // Agregar evento al botón limpiar\r\n        const btnLimpiar = document.querySelector('a[href=\"/admin\"]');\r\n        if(btnLimpiar) {\r\n            btnLimpiar.addEventListener('click', function(e) {\r\n                e.preventDefault();\r\n                // Limpiar el input de fecha\r\n                fechaInput.value = '';\r\n                // Redirigir a admin sin parámetros\r\n                window.location = '/admin';\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nfunction cambiarEstadoCita() {\r\n    const selectores = document.querySelectorAll('.estado-cita');\r\n    selectores.forEach(selector => {\r\n        selector.addEventListener('change', async function(e) {\r\n            const citaId = this.dataset.citaId;\r\n            const estado = this.value;\r\n\r\n            try {\r\n                const datos = new FormData();\r\n                datos.append('id', citaId);\r\n                datos.append('estado', estado);\r\n\r\n                const url = '/api/citas/estado';\r\n                const respuesta = await fetch(url, {\r\n                    method: 'POST',\r\n                    body: datos\r\n                });\r\n\r\n                const resultado = await respuesta.json();\r\n\r\n                if(resultado.tipo === 'exito') {\r\n                    // Actualizar el badge de estado\r\n                    const citaElement = this.closest('.border');\r\n                    const badge = citaElement.querySelector('.estado-badge');\r\n                    \r\n                    // Remover clases anteriores\r\n                    badge.classList.remove(\r\n                        'bg-yellow-100', 'text-yellow-800',\r\n                        'bg-blue-100', 'text-blue-800',\r\n                        'bg-green-100', 'text-green-800',\r\n                        'bg-red-100', 'text-red-800'\r\n                    );\r\n                    \r\n                    // Agregar nuevas clases según el estado\r\n                    const clases = {\r\n                        'pendiente': ['bg-yellow-100', 'text-yellow-800'],\r\n                        'confirmada': ['bg-blue-100', 'text-blue-800'],\r\n                        'completada': ['bg-green-100', 'text-green-800'],\r\n                        'cancelada': ['bg-red-100', 'text-red-800']\r\n                    };\r\n                    \r\n                    badge.classList.add(...clases[estado]);\r\n                    badge.textContent = estado.charAt(0).toUpperCase() + estado.slice(1);\r\n\r\n                    // Mostrar mensaje de éxito\r\n                    Swal.fire({\r\n                        icon: 'success',\r\n                        title: 'Estado Actualizado',\r\n                        text: 'El estado de la cita se actualizó correctamente',\r\n                        showConfirmButton: false,\r\n                        timer: 1500\r\n                    });\r\n\r\n                    // Recargar la página para actualizar los stats\r\n                    setTimeout(() => {\r\n                        window.location.reload();\r\n                    }, 1500);\r\n                }\r\n            } catch (error) {\r\n                console.error(error);\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Error',\r\n                    text: 'Hubo un error al actualizar el estado'\r\n                });\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction manejarTabs() {\r\n    const tabs = document.querySelectorAll('.tab-btn');\r\n    const contents = document.querySelectorAll('.tab-content');\r\n\r\n    tabs.forEach(tab => {\r\n        tab.addEventListener('click', function() {\r\n            // Remover clases activas de todas las tabs\r\n            tabs.forEach(t => {\r\n                t.classList.remove('border-blue-500', 'text-blue-600');\r\n                t.classList.add('border-transparent', 'text-gray-500');\r\n            });\r\n\r\n            // Ocultar todos los contenidos\r\n            contents.forEach(content => {\r\n                content.classList.add('hidden');\r\n            });\r\n\r\n            // Activar la tab seleccionada\r\n            this.classList.remove('border-transparent', 'text-gray-500');\r\n            this.classList.add('border-blue-500', 'text-blue-600');\r\n            \r\n            // Mostrar el contenido correspondiente\r\n            const tabId = this.dataset.tab;\r\n            const contenidoActivo = document.querySelector(`#${tabId}-tab`);\r\n            if(contenidoActivo) {\r\n                contenidoActivo.classList.remove('hidden');\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction gestionarServicios() {\r\n    // Nuevo servicio\r\n    const btnNuevoServicio = document.querySelector('#nuevo-servicio');\r\n    if(btnNuevoServicio) {\r\n        btnNuevoServicio.addEventListener('click', mostrarFormularioServicio);\r\n    }\r\n\r\n    // Editar servicio\r\n    const btnsEditar = document.querySelectorAll('.editar-servicio');\r\n    btnsEditar.forEach(btn => {\r\n        btn.addEventListener('click', function() {\r\n            const id = this.dataset.id;\r\n            editarServicio(id);\r\n        });\r\n    });\r\n\r\n    // Eliminar servicio\r\n    const btnsEliminar = document.querySelectorAll('.eliminar-servicio');\r\n    btnsEliminar.forEach(btn => {\r\n        btn.addEventListener('click', function() {\r\n            const id = this.dataset.id;\r\n            confirmarEliminarServicio(id);\r\n        });\r\n    });\r\n}\r\n\r\nfunction mostrarFormularioServicio(servicio = {}) {\r\n    Swal.fire({\r\n        title: servicio.id ? 'Editar Servicio' : 'Nuevo Servicio',\r\n        html: `\r\n            <form id=\"formulario-servicio\" class=\"space-y-4\">\r\n                <input type=\"hidden\" name=\"id\" value=\"${servicio.id || ''}\">\r\n                <div>\r\n                    <label class=\"block text-sm font-medium text-gray-700\">Nombre del Servicio</label>\r\n                    <input type=\"text\" name=\"nombre_servicio\" \r\n                           class=\"mt-1 block w-full rounded-md border-gray-300\" \r\n                           value=\"${servicio.nombre_servicio || ''}\" \r\n                           required \r\n                           minlength=\"3\"\r\n                           \r\n                           title=\"Solo se permiten letras y espacios\">\r\n                </div>\r\n                <div>\r\n                    <label class=\"block text-sm font-medium text-gray-700\">Precio</label>\r\n                    <input type=\"number\" name=\"precio\" \r\n                           class=\"mt-1 block w-full rounded-md border-gray-300\" \r\n                           value=\"${servicio.precio || ''}\" \r\n                           required \r\n                           min=\"3000\"\r\n                           max=\"100000\"\r\n                           step=\"1\">\r\n                </div>\r\n                <div>\r\n                    <label class=\"block text-sm font-medium text-gray-700\">Tiempo Estimado (minutos)</label>\r\n                    <input type=\"number\" name=\"tiempo_estimado\" \r\n                           class=\"mt-1 block w-full rounded-md border-gray-300\" \r\n                           value=\"${servicio.tiempo_estimado || ''}\" \r\n                           required \r\n                           min=\"1\"\r\n                           step=\"1\">\r\n                </div>\r\n            </form>\r\n        `,\r\n        showCancelButton: true,\r\n        confirmButtonText: servicio.id ? 'Actualizar' : 'Crear',\r\n        cancelButtonText: 'Cancelar',\r\n        preConfirm: () => {\r\n            const form = document.getElementById('formulario-servicio');\r\n            if(!form.checkValidity()) {\r\n                form.reportValidity();\r\n                return false;\r\n            }\r\n            const formData = new FormData(form);\r\n            return guardarServicio(formData, servicio.id);\r\n        }\r\n    });\r\n}\r\n\r\nasync function guardarServicio(formData, id) {\r\n    try {\r\n        const url = id ? '/api/servicios/actualizar' : '/api/servicios/crear';\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            body: formData\r\n        });\r\n        const resultado = await response.json();\r\n\r\n        if(resultado.tipo === 'exito') {\r\n            Swal.fire('¡Éxito!', resultado.mensaje, 'success');\r\n            setTimeout(() => {\r\n                window.location.reload();\r\n            }, 1500);\r\n        } else {\r\n            Swal.fire('Error', resultado.mensaje, 'error');\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        Swal.fire('Error', 'Hubo un error al procesar la solicitud', 'error');\r\n    }\r\n}\r\n\r\nasync function editarServicio(id) {\r\n    try {\r\n        const response = await fetch(`/api/servicios/${id}`);\r\n        const servicio = await response.json();\r\n        mostrarFormularioServicio(servicio);\r\n    } catch (error) {\r\n        console.error(error);\r\n        Swal.fire('Error', 'No se pudo cargar el servicio', 'error');\r\n    }\r\n}\r\n\r\nfunction confirmarEliminarServicio(id) {\r\n    Swal.fire({\r\n        title: '¿Estás seguro?',\r\n        text: \"Esta acción no se puede revertir\",\r\n        icon: 'warning',\r\n        showCancelButton: true,\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n        confirmButtonText: 'Sí, eliminar',\r\n        cancelButtonText: 'Cancelar'\r\n    }).then((result) => {\r\n        if (result.isConfirmed) {\r\n            eliminarServicio(id);\r\n        }\r\n    });\r\n}\r\n\r\nasync function eliminarServicio(id) {\r\n    try {\r\n        const formData = new FormData();\r\n        formData.append('id', id);\r\n\r\n        const response = await fetch('/api/servicios/eliminar', {\r\n            method: 'POST',\r\n            body: formData\r\n        });\r\n        const resultado = await response.json();\r\n\r\n        if(resultado.tipo === 'exito') {\r\n            Swal.fire('¡Eliminado!', resultado.mensaje, 'success');\r\n            setTimeout(() => {\r\n                window.location.reload();\r\n            }, 1500);\r\n        } else {\r\n            Swal.fire('Error', resultado.mensaje, 'error');\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        Swal.fire('Error', 'Hubo un error al eliminar el servicio', 'error');\r\n    }\r\n}\r\n\r\nfunction gestionarUsuarios() {\r\n    // Botones Ver Detalles\r\n    const btnsVerDetalles = document.querySelectorAll('.ver-usuario');\r\n    btnsVerDetalles.forEach(btn => {\r\n        btn.addEventListener('click', async function() {\r\n            const id = this.dataset.id;\r\n            try {\r\n                const response = await fetch(`/api/usuarios?id=${id}`);\r\n                const usuario = await response.json();\r\n                \r\n                if(usuario) {\r\n                    // Validar que los datos existan antes de mostrarlos\r\n                    const nombreCompleto = `${usuario.nombre || ''} ${usuario.apellido || ''}`.trim();\r\n                    const fechaRegistro = usuario.fecha_creacion ? new Date(usuario.fecha_creacion).toLocaleDateString() : 'No disponible';\r\n                    const fechaActualizacion = usuario.ultima_actualizacion ? new Date(usuario.ultima_actualizacion).toLocaleDateString() : 'No disponible';\r\n\r\n                    Swal.fire({\r\n                        title: 'Detalles del Usuario',\r\n                        html: `\r\n                            <div class=\"text-left\">\r\n                                <p class=\"mb-2\"><strong>Nombre:</strong> ${nombreCompleto || 'No disponible'}</p>\r\n                                <p class=\"mb-2\"><strong>Email:</strong> ${usuario.email || 'No disponible'}</p>\r\n                                <p class=\"mb-2\"><strong>Teléfono:</strong> ${usuario.telefono || 'No disponible'}</p>\r\n                                <p class=\"mb-2\"><strong>Estado:</strong> ${usuario.confirmado ? 'Confirmado' : 'Pendiente'}</p>\r\n                                <p class=\"mb-2\"><strong>Rol:</strong> ${usuario.admin ? 'Administrador' : 'Cliente'}</p>\r\n                                <p class=\"mb-2\"><strong>Fecha de registro:</strong> ${fechaRegistro}</p>\r\n                                <p class=\"mb-2\"><strong>Última actualización:</strong> ${fechaActualizacion}</p>\r\n                            </div>\r\n                        `,\r\n                        confirmButtonText: 'Cerrar',\r\n                        customClass: {\r\n                            confirmButton: 'bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors'\r\n                        }\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                console.error('Error:', error);\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Error',\r\n                    text: 'No se pudo cargar la información del usuario'\r\n                });\r\n            }\r\n        });\r\n    });\r\n\r\n    // Editar usuario\r\n    const btnsEditar = document.querySelectorAll('.editar-usuario');\r\n    btnsEditar.forEach(btn => {\r\n        btn.addEventListener('click', async function() {\r\n            const id = this.dataset.id;\r\n            try {\r\n                const response = await fetch(`/api/usuarios?id=${id}`);\r\n                const usuario = await response.json();\r\n                \r\n                if(usuario) {\r\n                    mostrarFormularioUsuario(usuario);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error:', error);\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Error',\r\n                    text: 'No se pudo cargar la información del usuario'\r\n                });\r\n            }\r\n        });\r\n    });\r\n\r\n    // Eliminar usuario\r\n    const btnsEliminar = document.querySelectorAll('.eliminar-usuario');\r\n    btnsEliminar.forEach(btn => {\r\n        btn.addEventListener('click', function() {\r\n            const id = this.dataset.id;\r\n            \r\n            Swal.fire({\r\n                title: '¿Estás seguro?',\r\n                text: \"Esta acción eliminará al usuario y todas sus citas. No podrás revertir esto.\",\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#d33',\r\n                cancelButtonColor: '#3085d6',\r\n                confirmButtonText: 'Sí, eliminar',\r\n                cancelButtonText: 'Cancelar'\r\n            }).then((result) => {\r\n                if (result.isConfirmed) {\r\n                    eliminarUsuario(id);\r\n                }\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\nfunction mostrarFormularioUsuario(usuario) {\r\n    Swal.fire({\r\n        title: 'Editar Usuario',\r\n        html: `\r\n            <form id=\"formulario-usuario\" class=\"space-y-4\">\r\n                <input type=\"hidden\" name=\"id\" value=\"${usuario.id}\">\r\n                <div>\r\n                    <label class=\"block text-sm font-medium text-gray-700\">Nombre</label>\r\n                    <input type=\"text\" name=\"nombre\" \r\n                           class=\"mt-1 block w-full rounded-md border-gray-300\" \r\n                           value=\"${usuario.nombre || ''}\" \r\n                           required>\r\n                </div>\r\n                <div>\r\n                    <label class=\"block text-sm font-medium text-gray-700\">Apellido</label>\r\n                    <input type=\"text\" name=\"apellido\" \r\n                           class=\"mt-1 block w-full rounded-md border-gray-300\" \r\n                           value=\"${usuario.apellido || ''}\" \r\n                           required>\r\n                </div>\r\n                <div>\r\n                    <label class=\"block text-sm font-medium text-gray-700\">Email</label>\r\n                    <input type=\"email\" name=\"email\" \r\n                           class=\"mt-1 block w-full rounded-md border-gray-300\" \r\n                           value=\"${usuario.email || ''}\" \r\n                           required>\r\n                </div>\r\n                <div>\r\n                    <label class=\"block text-sm font-medium text-gray-700\">Teléfono</label>\r\n                    <input type=\"tel\" name=\"telefono\" \r\n                           class=\"mt-1 block w-full rounded-md border-gray-300\" \r\n                           value=\"${usuario.telefono || ''}\" \r\n                           required \r\n                           pattern=\"[0-9]{9}\">\r\n                </div>\r\n                <div>\r\n                    <label class=\"block text-sm font-medium text-gray-700\">Estado de la cuenta</label>\r\n                    <select name=\"confirmado\" \r\n                            class=\"mt-1 block w-full rounded-md border-gray-300\">\r\n                        <option value=\"0\" ${!usuario.confirmado ? 'selected' : ''}>Pendiente</option>\r\n                        <option value=\"1\" ${usuario.confirmado ? 'selected' : ''}>Confirmada</option>\r\n                    </select>\r\n                </div>\r\n            </form>\r\n        `,\r\n        showCancelButton: true,\r\n        confirmButtonText: 'Actualizar',\r\n        cancelButtonText: 'Cancelar',\r\n        preConfirm: () => {\r\n            const form = document.getElementById('formulario-usuario');\r\n            if(!form.checkValidity()) {\r\n                form.reportValidity();\r\n                return false;\r\n            }\r\n            const formData = new FormData(form);\r\n            return actualizarUsuario(formData);\r\n        }\r\n    });\r\n}\r\n\r\nasync function actualizarUsuario(formData) {\r\n    try {\r\n        const response = await fetch('/api/usuarios/actualizar', {\r\n            method: 'POST',\r\n            body: formData\r\n        });\r\n        const resultado = await response.json();\r\n\r\n        if(resultado.tipo === 'exito') {\r\n            Swal.fire({\r\n                icon: 'success',\r\n                title: '¡Usuario actualizado!',\r\n                text: resultado.mensaje,\r\n                showConfirmButton: false,\r\n                timer: 1500\r\n            });\r\n\r\n            setTimeout(() => {\r\n                window.location.reload();\r\n            }, 1500);\r\n        } else {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Error',\r\n                text: resultado.mensaje\r\n            });\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        Swal.fire({\r\n            icon: 'error',\r\n            title: 'Error',\r\n            text: 'Hubo un error al actualizar el usuario'\r\n        });\r\n    }\r\n}\r\n\r\nasync function eliminarUsuario(id) {\r\n    try {\r\n        const datos = new FormData();\r\n        datos.append('id', id);\r\n\r\n        const response = await fetch('/api/usuarios/eliminar', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n        const resultado = await response.json();\r\n\r\n        if(resultado.tipo === 'exito') {\r\n            Swal.fire({\r\n                icon: 'success',\r\n                title: '¡Usuario eliminado!',\r\n                text: resultado.mensaje,\r\n                showConfirmButton: false,\r\n                timer: 1500\r\n            });\r\n\r\n            // Recargar la página después de 1.5 segundos\r\n            setTimeout(() => {\r\n                window.location.reload();\r\n            }, 1500);\r\n        } else {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Error',\r\n                text: resultado.mensaje\r\n            });\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        Swal.fire({\r\n            icon: 'error',\r\n            title: 'Error',\r\n            text: 'Hubo un error al eliminar el usuario'\r\n        });\r\n    }\r\n}\r\n\r\n\r\n"]}