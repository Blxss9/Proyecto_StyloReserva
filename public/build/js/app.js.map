{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["let paso = 1;\r\nconst pasoInicial = 1;\r\nconst pasoFinal = 4;\r\n\r\nconst cita = {\r\n    id: '',\r\n    nombre: '',\r\n    fecha: '',\r\n    hora: '',\r\n    servicios: []\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    iniciarApp();\r\n});\r\n\r\nfunction iniciarApp() {\r\n    mostrarSeccion(); // Muestra y oculta las secciones\r\n    tabs(); // Cambia la sección cuando se presionen los tabs\r\n    botonesPaginador(); // Agrega o quita los botones del paginador\r\n    paginaSiguiente();\r\n    paginaAnterior();\r\n    \r\n    consultarAPI(); // Consulta la API en el backend de PHP\r\n    \r\n    idCliente(); // Añade el id del cliente al objeto de cita\r\n    nombreCliente(); // Añade el nombre del cliente al objeto de cita\r\n    seleccionarFecha(); // Añade la fecha de la cita en el objeto\r\n    seleccionarHora(); // Añade la hora de la cita en el objeto\r\n    \r\n    mostrarResumen(); // Muestra el resumen de la cita\r\n}\r\n\r\nasync function consultarAPI() {\r\n    try {\r\n        const url = '/api/servicios';\r\n        const respuesta = await fetch(url);\r\n        const resultado = await respuesta.json();\r\n        \r\n        if(!resultado.error) {\r\n            mostrarServicios(resultado);\r\n        } else {\r\n            console.error(resultado.error);\r\n            mostrarAlerta('Error al cargar los servicios', 'error');\r\n        }\r\n        \r\n    } catch (error) {\r\n        console.error(error);\r\n        mostrarAlerta('Error al cargar los servicios', 'error');\r\n    }\r\n}\r\n\r\nfunction mostrarServicios(servicios) {\r\n    const contenedorServicios = document.querySelector('#servicios');\r\n    \r\n    if(!contenedorServicios) {\r\n        console.error('El contenedor de servicios no existe');\r\n        return;\r\n    }\r\n    \r\n    // Limpiar el HTML previo\r\n    contenedorServicios.innerHTML = '';\r\n    \r\n    servicios.forEach(servicio => {\r\n        const { id, nombre_servicio, precio, tiempo_estimado } = servicio;\r\n        const precioFormateado = parseInt(precio).toLocaleString('es-CL');\r\n        const tiempoFormateado = formatearTiempo(parseInt(tiempo_estimado));\r\n\r\n        const servicioDiv = document.createElement('DIV');\r\n        servicioDiv.classList.add('servicio');\r\n        servicioDiv.dataset.idServicio = id;\r\n\r\n        servicioDiv.innerHTML = `\r\n            <p class=\"nombre-servicio\">${nombre_servicio}</p>\r\n            <p class=\"precio-servicio\">$${precioFormateado}</p>\r\n            <p class=\"tiempo-servicio\">Duración: ${tiempoFormateado}</p>\r\n        `;\r\n\r\n        servicioDiv.onclick = () => seleccionarServicio(servicio);\r\n        contenedorServicios.appendChild(servicioDiv);\r\n    });\r\n}\r\n\r\nfunction paginaSiguiente() {\r\n    const btnSiguiente = document.querySelector('#siguiente');\r\n    \r\n    if(!btnSiguiente) return;\r\n    \r\n    btnSiguiente.addEventListener('click', () => {\r\n        if(paso >= pasoFinal) return;\r\n        \r\n        if(paso === 1) {\r\n            // Validar que se haya seleccionado al menos un servicio\r\n            if(!validarServicios()) return;\r\n        }\r\n        \r\n        if(paso === 2) {\r\n            // Validar que se haya seleccionado fecha y hora\r\n            if(!validarFecha()) return;\r\n        }\r\n        \r\n        paso++;\r\n        mostrarSeccion();\r\n        botonesPaginador();\r\n        \r\n        // Actualizar el resumen al cambiar de página\r\n        mostrarResumen();\r\n    });\r\n}\r\n\r\nfunction paginaAnterior() {\r\n    const btnAnterior = document.querySelector('#anterior');\r\n    \r\n    if(!btnAnterior) return;\r\n    \r\n    btnAnterior.addEventListener('click', () => {\r\n        if(paso <= pasoInicial) return;\r\n        \r\n        paso--;\r\n        mostrarSeccion();\r\n        botonesPaginador();\r\n    });\r\n}\r\n\r\nfunction botonesPaginador() {\r\n    const btnAnterior = document.querySelector('#anterior');\r\n    const btnSiguiente = document.querySelector('#siguiente');\r\n    \r\n    if(!btnAnterior || !btnSiguiente) return;\r\n\r\n    if(paso === 1) {\r\n        btnAnterior.classList.add('hidden');\r\n    } else {\r\n        btnAnterior.classList.remove('hidden');\r\n    }\r\n\r\n    if(paso === 4) {\r\n        btnSiguiente.classList.add('hidden');\r\n    } else {\r\n        btnSiguiente.classList.remove('hidden');\r\n        btnSiguiente.textContent = 'Siguiente »';\r\n    }\r\n}\r\n\r\nfunction mostrarSeccion() {\r\n    // Ocultar la sección que tenga la clase de mostrar\r\n    const seccionAnterior = document.querySelector('.seccion:not(.hidden)');\r\n    if(seccionAnterior) {\r\n        seccionAnterior.classList.add('hidden');\r\n    }\r\n    \r\n    // Seleccionar la sección con el paso\r\n    const pasoSelector = `#paso-${paso}`;\r\n    const seccion = document.querySelector(pasoSelector);\r\n    if(seccion) {\r\n        seccion.classList.remove('hidden');\r\n    }\r\n    \r\n    // Actualizar todos los botones de paso\r\n    const botones = document.querySelectorAll('.step-button');\r\n    botones.forEach((boton, index) => {\r\n        const pasoBoton = index + 1;\r\n        \r\n        // Resetear clases\r\n        boton.classList.remove('bg-blue-600', 'text-white', 'bg-gray-200', 'text-gray-400');\r\n        \r\n        // Colorear los botones completados y el actual\r\n        if (pasoBoton <= paso) {\r\n            boton.classList.add('bg-blue-600', 'text-white');\r\n        } else {\r\n            boton.classList.add('bg-gray-200', 'text-gray-400');\r\n        }\r\n    });\r\n    \r\n    // Actualizar la barra de progreso\r\n    const progreso = document.querySelector('#progress');\r\n    if(progreso) {\r\n        const porcentaje = ((paso) / pasoFinal) * 100;\r\n        progreso.style.width = `${porcentaje}%`;\r\n    }\r\n}\r\n\r\nfunction mostrarAlerta(mensaje, tipo) {\r\n    if(typeof Swal === 'undefined') {\r\n        console.error('SweetAlert2 no está cargado');\r\n        alert(mensaje);\r\n        return;\r\n    }\r\n\r\n    Swal.fire({\r\n        icon: tipo,\r\n        title: tipo === 'error' ? 'Error' : 'Éxito',\r\n        text: mensaje\r\n    });\r\n}\r\n\r\nfunction tabs() {\r\n    const botones = document.querySelectorAll('.step-button');\r\n    botones.forEach(boton => {\r\n        boton.addEventListener('click', function(e) {\r\n            const pasoSeleccionado = parseInt(e.target.dataset.paso);\r\n            \r\n            // Si intenta retroceder, permitirlo\r\n            if (pasoSeleccionado < paso) {\r\n                paso = pasoSeleccionado;\r\n                mostrarSeccion();\r\n                botonesPaginador();\r\n                return;\r\n            }\r\n\r\n            // Validaciones para avanzar\r\n            if (paso === 1 && !validarServicios()) {\r\n                return;\r\n            }\r\n\r\n            if (paso === 2 && !validarFecha()) {\r\n                return;\r\n            }\r\n\r\n            // Si todas las validaciones pasan, permitir el cambio\r\n            if (pasoSeleccionado - paso === 1) {\r\n                paso = pasoSeleccionado;\r\n                mostrarSeccion();\r\n                botonesPaginador();\r\n            } else {\r\n                // Si intenta saltar más de una sección, mostrar alerta\r\n                mostrarAlerta('Por favor, complete los pasos en orden', 'error');\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction validarServicios() {\r\n    if(cita.servicios.length === 0) {\r\n        mostrarAlerta('Debes seleccionar al menos un servicio', 'error');\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction validarFecha() {\r\n    const fecha = document.querySelector('#fecha').value;\r\n    \r\n    if(fecha === '' || !cita.hora) {\r\n        mostrarAlerta('Debes seleccionar fecha y hora', 'error');\r\n        return false;\r\n    }\r\n    \r\n    return true;\r\n}\r\n\r\nfunction validarResumen() {\r\n    const elementos = Object.values(cita);\r\n    if(elementos.includes('')) {\r\n        mostrarAlerta('Faltan datos por confirmar', 'error');\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction seleccionarServicio(servicio) {\r\n    const { id } = servicio;\r\n    const { servicios } = cita;\r\n\r\n    // Identificar el elemento clickeado\r\n    const divServicio = document.querySelector(`[data-id-servicio=\"${id}\"]`);\r\n\r\n    // Comprobar si un servicio ya fue agregado o quitarlo\r\n    if(servicios.some(agregado => agregado.id === id)) {\r\n        // Eliminarlo\r\n        cita.servicios = servicios.filter(agregado => agregado.id !== id);\r\n        divServicio.classList.remove('seleccionado');\r\n    } else {\r\n        // Agregarlo\r\n        cita.servicios = [...servicios, servicio];\r\n        divServicio.classList.add('seleccionado');\r\n    }\r\n    \r\n    // Actualizar el resumen cada vez que se selecciona o deselecciona un servicio\r\n    mostrarResumen();\r\n}\r\n\r\n// También necesitamos implementar las funciones de cliente\r\nfunction idCliente() {\r\n    // Verificar si el elemento existe antes de acceder a su valor\r\n    const inputId = document.querySelector('#id');\r\n    if(inputId) {\r\n        cita.id = inputId.value;\r\n    }\r\n}\r\n\r\nfunction nombreCliente() {\r\n    // Verificar si el elemento existe antes de acceder a su valor\r\n    const inputNombre = document.querySelector('#nombre');\r\n    if(inputNombre) {\r\n        cita.nombre = inputNombre.value;\r\n    }\r\n}\r\n\r\nfunction seleccionarFecha() {\r\n    const inputFecha = document.querySelector('#fecha');\r\n    const horasDisponibles = document.querySelector('#horas-disponibles');\r\n    \r\n    if(!inputFecha || !horasDisponibles) {\r\n        console.error('No se encontraron los elementos necesarios');\r\n        return;\r\n    }\r\n    \r\n    // Establecer la fecha mínima como hoy\r\n    const hoy = new Date();\r\n    const año = hoy.getFullYear();\r\n    const mes = (hoy.getMonth() + 1).toString().padStart(2, '0');\r\n    const dia = hoy.getDate().toString().padStart(2, '0');\r\n    const fechaMinima = `${año}-${mes}-${dia}`;\r\n    \r\n    inputFecha.min = fechaMinima;\r\n    \r\n    inputFecha.addEventListener('input', function(e) {\r\n        const fechaSeleccionada = new Date(e.target.value + 'T00:00:00');\r\n        const fechaHoy = new Date(fechaMinima + 'T00:00:00');\r\n        \r\n        if(fechaSeleccionada < fechaHoy) {\r\n            e.target.value = '';\r\n            mostrarAlerta('No puedes seleccionar fechas pasadas', 'error');\r\n            horasDisponibles.classList.add('hidden');\r\n            cita.fecha = '';\r\n            cita.hora = '';\r\n        } else {\r\n            const dia = fechaSeleccionada.getUTCDay();\r\n            \r\n            if([6, 0].includes(dia)) {\r\n                e.target.value = '';\r\n                mostrarAlerta('Fines de semana no permitidos', 'error');\r\n                horasDisponibles.classList.add('hidden');\r\n                cita.fecha = '';\r\n                cita.hora = '';\r\n            } else {\r\n                cita.fecha = e.target.value;\r\n                mostrarHorasDisponibles();\r\n            }\r\n        }\r\n        // Actualizar el resumen cuando se selecciona una fecha\r\n        mostrarResumen();\r\n    });\r\n}\r\n\r\nfunction mostrarHorasDisponibles() {\r\n    const horasDisponibles = document.querySelector('#horas-disponibles');\r\n    \r\n    if(!horasDisponibles) {\r\n        console.error('No se encontró el contenedor de horas disponibles');\r\n        return;\r\n    }\r\n    \r\n    horasDisponibles.classList.remove('hidden');\r\n\r\n    // Definir las horas disponibles por período\r\n    const horas = {\r\n        mañana: ['10:00', '10:50', '11:40'],\r\n        tarde: ['12:30', '15:00', '15:50', '16:40', '17:30'],\r\n        noche: ['18:20', '19:10']\r\n    };\r\n\r\n    // Obtener la fecha seleccionada y la fecha actual\r\n    const fechaSeleccionada = new Date(cita.fecha + 'T00:00:00');\r\n    const ahora = new Date();\r\n    const esHoy = fechaSeleccionada.toDateString() === ahora.toDateString();\r\n\r\n    // Limpiar contenedores\r\n    ['mañana', 'tarde', 'noche'].forEach(periodo => {\r\n        const contenedor = document.querySelector(`#horas-${periodo}`);\r\n        if(!contenedor) {\r\n            console.error(`No se encontró el contenedor para ${periodo}`);\r\n            return;\r\n        }\r\n        \r\n        contenedor.innerHTML = '';\r\n        \r\n        horas[periodo].forEach(async (hora) => {\r\n            const boton = document.createElement('BUTTON');\r\n            boton.type = 'button';\r\n            boton.classList.add('px-4', 'py-2', 'text-sm', 'border', 'rounded', 'hover:bg-blue-500', 'hover:text-white');\r\n            \r\n            // Verificar si la hora ya pasó (solo si es hoy)\r\n            const [horaNum, minutos] = hora.split(':');\r\n            const horaComparar = new Date(fechaSeleccionada);\r\n            horaComparar.setHours(parseInt(horaNum), parseInt(minutos), 0);\r\n            \r\n            const horaYaPaso = esHoy && horaComparar <= ahora;\r\n            \r\n            // Verificar disponibilidad solo si la hora no ha pasado\r\n            const disponible = !horaYaPaso && await verificarDisponibilidad(cita.fecha, hora);\r\n            \r\n            if (!disponible || horaYaPaso) {\r\n                boton.classList.add('bg-gray-200', 'cursor-not-allowed', 'opacity-50');\r\n                boton.disabled = true;\r\n                boton.title = horaYaPaso ? 'Esta hora ya pasó' : 'Horario no disponible';\r\n            }\r\n            \r\n            if(cita.hora === hora) {\r\n                boton.classList.add('bg-blue-500', 'text-white');\r\n            }\r\n            \r\n            boton.textContent = hora;\r\n            \r\n            boton.onclick = function() {\r\n                if (disponible && !horaYaPaso) {\r\n                    document.querySelectorAll('button[type=\"button\"]').forEach(btn => {\r\n                        btn.classList.remove('bg-blue-500', 'text-white');\r\n                    });\r\n                    \r\n                    this.classList.add('bg-blue-500', 'text-white');\r\n                    cita.hora = hora;\r\n                    \r\n                    mostrarResumen();\r\n                }\r\n            };\r\n            \r\n            contenedor.appendChild(boton);\r\n        });\r\n    });\r\n}\r\n\r\n// Función para verificar disponibilidad\r\nasync function verificarDisponibilidad(fecha, hora) {\r\n    try {\r\n        const url = `/api/disponibilidad?fecha=${fecha}&hora=${hora}`;\r\n        console.log('Verificando disponibilidad para:', { fecha, hora });\r\n        \r\n        const respuesta = await fetch(url);\r\n        const resultado = await respuesta.json();\r\n        console.log('Respuesta del servidor:', resultado);\r\n        \r\n        if (resultado.error) {\r\n            console.error('Error:', resultado.error);\r\n            return false;\r\n        }\r\n        \r\n        return resultado.disponible;\r\n    } catch (error) {\r\n        console.error('Error al verificar disponibilidad:', error);\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction seleccionarHora() {\r\n    const inputHora = document.querySelector('#hora');\r\n    inputHora.addEventListener('input', function(e) {\r\n        const horaCita = e.target.value;\r\n        const hora = horaCita.split(\":\")[0];\r\n        if(hora < 10 || hora > 18) {\r\n            e.target.value = '';\r\n            mostrarAlerta('Hora no válida', 'error');\r\n        } else {\r\n            cita.hora = e.target.value;\r\n        }\r\n    });\r\n}\r\n\r\nfunction formatearTiempo(minutos) {\r\n    if (minutos >= 60) {\r\n        const horas = Math.floor(minutos / 60);\r\n        const minutosRestantes = minutos % 60;\r\n        \r\n        if (minutosRestantes === 0) {\r\n            return `${horas} ${horas === 1 ? 'hora' : 'horas'}`;\r\n        } else {\r\n            return `${horas} ${horas === 1 ? 'hora' : 'horas'} y ${minutosRestantes} ${minutosRestantes === 1 ? 'minuto' : 'minutos'}`;\r\n        }\r\n    }\r\n    return `${minutos} ${minutos === 1 ? 'minuto' : 'minutos'}`;\r\n}\r\n\r\nfunction mostrarResumen() {\r\n    const resumen = document.querySelector('#resumen-cita');\r\n\r\n    // Limpiar el contenido\r\n    while(resumen.firstChild) {\r\n        resumen.removeChild(resumen.firstChild);\r\n    }\r\n\r\n    // Verificar si hay servicios seleccionados y datos completos\r\n    if(Object.values(cita).includes('') || cita.servicios.length === 0) {\r\n        return;\r\n    }\r\n\r\n    const { nombre, fecha, hora, servicios } = cita;\r\n\r\n    // Contenedor principal\r\n    const contenedorResumen = document.createElement('DIV');\r\n    contenedorResumen.classList.add('p-6', 'space-y-6');\r\n\r\n    // Nombre del cliente\r\n    const nombreCliente = document.createElement('P');\r\n    nombreCliente.innerHTML = `<span class=\"font-bold\">Cliente:</span> ${nombre}`;\r\n    nombreCliente.classList.add('text-lg');\r\n\r\n    // Contenedor de servicios\r\n    const contenedorServicios = document.createElement('DIV');\r\n    contenedorServicios.classList.add('space-y-3');\r\n\r\n    // Título de servicios\r\n    const tituloServicios = document.createElement('H3');\r\n    tituloServicios.textContent = 'Servicios Seleccionados:';\r\n    tituloServicios.classList.add('font-bold', 'text-lg', 'mb-3');\r\n    contenedorServicios.appendChild(tituloServicios);\r\n\r\n    // Iterando y mostrando los servicios\r\n    servicios.forEach(servicio => {\r\n        const { nombre_servicio, precio, tiempo_estimado } = servicio;\r\n        const servicioParrafo = document.createElement('P');\r\n        const precioFormateado = new Intl.NumberFormat('es-CL', {\r\n            style: 'currency',\r\n            currency: 'CLP'\r\n        }).format(precio);\r\n        const tiempoFormateado = formatearTiempo(parseInt(tiempo_estimado));\r\n        servicioParrafo.textContent = `${nombre_servicio} - ${tiempoFormateado} - ${precioFormateado}`;\r\n        contenedorServicios.appendChild(servicioParrafo);\r\n    });\r\n\r\n    // Calcular y mostrar el tiempo total\r\n    const tiempoTotal = servicios.reduce((total, servicio) => total + parseInt(servicio.tiempo_estimado), 0);\r\n    const tiempoParrafo = document.createElement('P');\r\n    const tiempoTotalFormateado = formatearTiempo(tiempoTotal);\r\n    tiempoParrafo.innerHTML = `<span class=\"font-bold\">Tiempo Total:</span> ${tiempoTotalFormateado}`;\r\n    tiempoParrafo.classList.add('text-lg', 'mt-3');\r\n\r\n    // Formatear la fecha\r\n    const fechaObj = new Date(fecha + 'T00:00:00');  // Añadir T00:00:00 para forzar hora local\r\n    const opciones = { \r\n        weekday: 'long', \r\n        year: 'numeric', \r\n        month: 'long', \r\n        day: 'numeric',\r\n        timeZone: 'America/Santiago'  // Especificar zona horaria de Chile\r\n    };\r\n    const fechaFormateada = fechaObj.toLocaleDateString('es-CL', opciones);\r\n    // Capitalizar primera letra\r\n    const fechaCapitalizada = fechaFormateada.charAt(0).toUpperCase() + fechaFormateada.slice(1);\r\n\r\n    const fechaCita = document.createElement('P');\r\n    fechaCita.innerHTML = `<span class=\"font-bold\">Fecha:</span> ${fechaCapitalizada}`;\r\n    fechaCita.classList.add('text-lg');\r\n\r\n    const horaCita = document.createElement('P');\r\n    horaCita.innerHTML = `<span class=\"font-bold\">Hora:</span> ${hora} hrs`;\r\n    horaCita.classList.add('text-lg');\r\n\r\n    // Calcular y mostrar el total\r\n    const total = servicios.reduce((total, servicio) => total + parseFloat(servicio.precio), 0);\r\n    const totalFormateado = new Intl.NumberFormat('es-CL', {\r\n        style: 'currency',\r\n        currency: 'CLP'\r\n    }).format(total);\r\n    \r\n    const totalParrafo = document.createElement('P');\r\n    totalParrafo.innerHTML = `<span class=\"font-bold\">Total:</span> ${totalFormateado}`;\r\n    totalParrafo.classList.add('text-xl', 'mt-6');\r\n\r\n    // Agregar al contenedor principal\r\n    contenedorResumen.appendChild(nombreCliente);\r\n    contenedorResumen.appendChild(contenedorServicios);\r\n    contenedorResumen.appendChild(fechaCita);\r\n    contenedorResumen.appendChild(horaCita);\r\n    contenedorResumen.appendChild(tiempoParrafo);\r\n    contenedorResumen.appendChild(totalParrafo);\r\n\r\n    // Agregar al resumen\r\n    resumen.appendChild(contenedorResumen);\r\n}\r\n\r\nfunction toggleAccordion(id) {\r\n    const content = document.getElementById(id);\r\n    const arrow = document.getElementById(`arrow-${id.split('-')[1]}`);\r\n    \r\n    // Oculta todos los contenidos\r\n    document.querySelectorAll('[id^=\"pago-\"]').forEach(elem => {\r\n        if (elem.id !== id) {\r\n            elem.classList.add('hidden');\r\n        }\r\n    });\r\n    \r\n    // Muestra/oculta el contenido seleccionado\r\n    content.classList.toggle('hidden');\r\n    \r\n    // Rota la flecha\r\n    if (content.classList.contains('hidden')) {\r\n        arrow.style.transform = 'rotate(0deg)';\r\n    } else {\r\n        arrow.style.transform = 'rotate(180deg)';\r\n        // Reinicializa PayPal si es necesario\r\n        if (id === 'pago-paypal' && !content.classList.contains('hidden')) {\r\n            const paypalContainer = document.getElementById('paypal-button-container');\r\n            paypalContainer.innerHTML = ''; // Limpia el contenedor\r\n            initPayPal();\r\n        }\r\n    }\r\n}\r\n\r\n// Función para inicializar PayPal\r\nfunction initPayPal() {\r\n    if (window.paypal) {\r\n        paypal.Buttons({\r\n            createOrder: async () => {\r\n                try {\r\n                    const response = await fetch('/api/orders', {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            servicios: cita.servicios,\r\n                            fecha: cita.fecha,\r\n                            hora: cita.hora,\r\n                            usuarioId: cita.id\r\n                        })\r\n                    });\r\n\r\n                    if (!response.ok) {\r\n                        throw new Error('Error al crear la orden');\r\n                    }\r\n\r\n                    const data = await response.json();\r\n                    return data.id;\r\n                } catch (error) {\r\n                    console.error('Error:', error);\r\n                    mostrarAlerta('Error al procesar el pago', 'error');\r\n                }\r\n            },\r\n            onApprove: async (data) => {\r\n                try {\r\n                    const response = await fetch(`/api/orders/capture/${data.orderID}`, {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        }\r\n                    });\r\n\r\n                    if (!response.ok) {\r\n                        throw new Error('Error en la captura del pago');\r\n                    }\r\n\r\n                    const resultado = await response.json();\r\n                    \r\n                    if (resultado.status === 'success') {\r\n                        // Mostrar alerta con opciones\r\n                        Swal.fire({\r\n                            icon: 'success',\r\n                            title: '¡Pago Exitoso!',\r\n                            text: 'Tu cita ha sido agendada y pagada correctamente',\r\n                            showCancelButton: true,\r\n                            confirmButtonText: 'Ver Comprobante',\r\n                            cancelButtonText: 'Nueva Cita',\r\n                            confirmButtonColor: '#3085d6',\r\n                            cancelButtonColor: '#6b7280'\r\n                        }).then((result) => {\r\n                            if (result.isConfirmed) {\r\n                                // Ir al comprobante\r\n                                window.location.href = resultado.comprobanteUrl;\r\n                            } else {\r\n                                // Recargar la página para nueva cita\r\n                                window.location.reload();\r\n                            }\r\n                        });\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error:', error);\r\n                    Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Error',\r\n                        text: error.message\r\n                    });\r\n                }\r\n            },\r\n            onError: (err) => {\r\n                console.error('Error PayPal:', err);\r\n                mostrarAlerta('Error en el proceso de pago', 'error');\r\n            }\r\n        }).render('#paypal-button-container');\r\n    } else {\r\n        console.error('PayPal SDK no está cargado');\r\n        mostrarAlerta('Error al cargar PayPal', 'error');\r\n    }\r\n}\r\n\r\nfunction mostrarComprobante(datos) {\r\n    const modalHTML = `\r\n        <div id=\"modal-comprobante\" class=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full\">\r\n            <div class=\"relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white\">\r\n                <div class=\"mt-3 text-center\">\r\n                    <h3 class=\"text-lg leading-6 font-medium text-gray-900\">Comprobante de Pago</h3>\r\n                    <div class=\"mt-2 px-7 py-3\">\r\n                        <div class=\"bg-gray-50 p-4 rounded-lg\">\r\n                            <p class=\"text-sm text-gray-600 mb-2\">\r\n                                <span class=\"font-bold\">Número de Orden:</span> \r\n                                ${datos.ordenId}\r\n                            </p>\r\n                            <p class=\"text-sm text-gray-600 mb-2\">\r\n                                <span class=\"font-bold\">Fecha:</span> \r\n                                ${datos.fecha}\r\n                            </p>\r\n                            <p class=\"text-sm text-gray-600 mb-2\">\r\n                                <span class=\"font-bold\">Hora:</span> \r\n                                ${datos.hora}\r\n                            </p>\r\n                            <p class=\"text-sm text-gray-600 mb-2\">\r\n                                <span class=\"font-bold\">Total Pagado:</span> \r\n                                ${datos.total}\r\n                            </p>\r\n                            <div class=\"mt-3\">\r\n                                <h4 class=\"font-bold text-sm mb-2\">Servicios:</h4>\r\n                                ${datos.servicios.map(servicio => `\r\n                                    <p class=\"text-sm text-gray-600\">\r\n                                        ${servicio.nombre} - ${servicio.precio}\r\n                                    </p>\r\n                                `).join('')}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"items-center px-4 py-3\">\r\n                        <button id=\"btn-descargar\" class=\"px-4 py-2 bg-blue-500 text-white text-base font-medium rounded-md shadow-sm hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300\">\r\n                            Descargar PDF\r\n                        </button>\r\n                        <button id=\"btn-cerrar\" class=\"mt-3 px-4 py-2 bg-gray-300 text-gray-700 text-base font-medium rounded-md shadow-sm hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-500\">\r\n                            Cerrar\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    `;\r\n\r\n    // Agregar el modal al DOM\r\n    document.body.insertAdjacentHTML('beforeend', modalHTML);\r\n\r\n    // Agregar event listeners\r\n    document.getElementById('btn-cerrar').addEventListener('click', () => {\r\n        document.getElementById('modal-comprobante').remove();\r\n        window.location.reload();\r\n    });\r\n\r\n    document.getElementById('btn-descargar').addEventListener('click', () => {\r\n        descargarComprobantePDF(datos);\r\n    });\r\n}\r\n\r\n// Inicializar PayPal cuando se carga la página\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    // ... resto del código de inicialización ...\r\n    \r\n    // Inicializar PayPal si estamos en el paso de pago\r\n    if (paso === 4) {\r\n        initPayPal();\r\n    }\r\n});\r\n\r\n// Configurar el botón de agendar\r\ndocument.getElementById('btn-agendar')?.addEventListener('click', async () => {\r\n    // Mostrar modal de confirmación\r\n    Swal.fire({\r\n        title: '¿Confirmar Cita?',\r\n        html: `\r\n            <div class=\"text-left\">\r\n                <p class=\"mb-2\"><strong>Fecha:</strong> ${formatearFecha(cita.fecha)}</p>\r\n                <p class=\"mb-2\"><strong>Hora:</strong> ${cita.hora}</p>\r\n                <p class=\"mb-2\"><strong>Servicios:</strong></p>\r\n                <ul class=\"list-disc pl-5\">\r\n                    ${cita.servicios.map(servicio => \r\n                        `<li>${servicio.nombre_servicio} - ${formatearPrecio(servicio.precio)}</li>`\r\n                    ).join('')}\r\n                </ul>\r\n                <p class=\"mt-2\"><strong>Total:</strong> ${formatearPrecio(calcularTotal(cita.servicios))}</p>\r\n            </div>\r\n        `,\r\n        icon: 'question',\r\n        showCancelButton: true,\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#6b7280',\r\n        confirmButtonText: 'Sí, Confirmar',\r\n        cancelButtonText: 'Cancelar'\r\n    }).then(async (result) => {\r\n        if (result.isConfirmed) {\r\n            try {\r\n                const response = await fetch('/api/citas', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        ...cita,\r\n                        servicios: cita.servicios.map(s => s.id).join(','),\r\n                        pago: 'PENDING',\r\n                        estado: 'pendiente'\r\n                    })\r\n                });\r\n\r\n                const resultado = await response.json();\r\n                \r\n                if(resultado.resultado) {\r\n                    Swal.fire({\r\n                        icon: 'success',\r\n                        title: '¡Cita Agendada!',\r\n                        text: 'Tu cita ha sido agendada correctamente, nos contactaremos contigo para confirmar tu asistencia.',\r\n                        showDenyButton: false,\r\n                        showCancelButton: false,\r\n                        confirmButtonText: 'Nueva Cita',\r\n                        confirmButtonColor: '#3085d6',\r\n                        footer: '<a href=\"/\" class=\"text-gray-500 hover:text-gray-700\">Volver al inicio</a>'\r\n                    }).then((result) => {\r\n                        if (result.isConfirmed) {\r\n                            // Recargar para nueva cita\r\n                            window.location.reload();\r\n                        }\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                console.error(error);\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Error',\r\n                    text: 'Hubo un error al agendar la cita'\r\n                });\r\n            }\r\n        }\r\n    });\r\n});\r\n\r\n// Función auxiliar para formatear la fecha\r\nfunction formatearFecha(fecha) {\r\n    const opciones = {\r\n        weekday: 'long',\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric',\r\n        timeZone: 'America/Santiago'  // Especificar zona horaria de Chile\r\n    };\r\n    \r\n    let fechaFormateada = new Date(fecha + 'T00:00:00').toLocaleDateString('es-ES', opciones);\r\n    return fechaFormateada.charAt(0).toUpperCase() + fechaFormateada.slice(1);\r\n}\r\n\r\n// Función auxiliar para formatear precio en CLP\r\nfunction formatearPrecio(precio) {\r\n    return new Intl.NumberFormat('es-CL', {\r\n        style: 'currency',\r\n        currency: 'CLP',\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 0\r\n    }).format(precio);\r\n}\r\n\r\n// Función auxiliar para calcular el total\r\nfunction calcularTotal(servicios) {\r\n    return servicios.reduce((total, servicio) => \r\n        total + parseFloat(servicio.precio), 0\r\n    );\r\n}\r\n\r\n"],"file":"app.js"}